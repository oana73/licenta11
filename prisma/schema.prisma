// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//title, code, valability
model Coupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  code       String
  valability DateTime

  user   User   @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId String @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Slider {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?

  products  Product[]
  marketIds String[]  @db.ObjectId
  markets   Market[]  @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  imageUrl    String?
  description String?
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  slug         String   @unique
  sku          String?
  codebar      String?
  price        Float
  discount     Float
  description  String?
  imageUrl     String?
  productImages  String[]
  isActive     Boolean
  productStock Int
  qty          Int
  tags         String[]
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId   String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  orderItems OrderItem[]
  sales      Sale[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
}

model Training {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  name     String
  content  String?
  imageUrl String?
  slug     String  @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SupplierProfile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String?
  lastName   String?
  phone        String?
  address      String?
  profileImage String?
  paymentTerms String
  notes        String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum UserRole {
  ADMIN
  USER
  SUPPLIER
  MODERATOR
}

enum Gender {
  FAMALE
  MALE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

//user => admin, supplier, customer
model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  password         String
  emailVerified    Boolean          @default(false)
  verifcationToken String?
  supplierProfile  SupplierProfile?
  profile          UserProfile? // Link to user profile
  orders           Order[]
  products         Product[]
  coupons         Coupon[]
  role             UserRole         @default(USER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sales            Sale[]
}

model UserProfile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  name     String?
  firstName     String?
  lastName      String?
  email         String?
  username         String?
  phone         String?
  //address detaikls
  streetAddress String?
  city          String?
  country       String?
  zipCode       String?
  dateOfBirth DateTime?
  profileImage String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Profile {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
// }

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  //personal details
  firstName     String
  lastName      String
  email         String
  phone         String
  //address detaikls
  streetAddress String
  city          String
  country       String
  zipCode       String
  shippingCost  Float
  orderNumber   String?
  //payment method
  paymentMethod String
  //Order items
  orderItems    OrderItem[]
  orderStatus   OrderStatus @default(PROCESSING)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  sales          Sale[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String   @db.ObjectId
  imageUrl  String?
  title     String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String   @db.ObjectId
  total     Float
  productTitle   String
  productPrice   Float
  productImage   String
  productQty     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  vendor    User     @relation(fields: [vendorId], references: [id])
}

