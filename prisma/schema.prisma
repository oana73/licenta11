// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
//title, code, valability
model Coupon{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  code String
  valability DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
model Slider{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  link String
  imageUrl String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
model Category {
   id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?   
  
  products  Product[]  
  marketIds String[] @db.ObjectId
  markets   Market[]   @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String @unique
  imageUrl    String?
  description String? 
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String   
  slug      String   @unique
  sku       String?
  codebar   String?
  price     Float
  discount  Float
  description   String?
  imageUrl   String?
  isActive  Boolean
  tags      String[]
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId

  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}



model Training{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content String
  slug String
  
}
model SupplierProfile{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  phone  String
  email  String
  address  String?
  profileImage  String?
  paymentTerms  String
  notes    String?
  
  
  user   User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId @unique

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}
enum UserRole{
  ADMIN 
  USER 
  SUPPLIER 
  MODERATOR
}
enum Gender{
  FAMALE
  MALE
}
//user => admin, supplier, customer
model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  password      String
  emailVerified DateTime?
  supplierProfile   SupplierProfile?
  products  Product[]
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// model Profile {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int  @unique // relation scalar field (used in the `@relation` attribute above)
// }